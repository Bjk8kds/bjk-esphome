substitutions:
  # Set the device name
  name: esp32c3-mhz19-co2
  # Set the friendly name
  friendly_name: ESP32C3 MH-Z19 CO2
  #Provide an OTA password:
  ota_pass: "ota_password"

esphome:
  name: $name
  friendly_name: $friendly_name
  comment: DIY CO2 Sensor with ESP32C3 Super Mini and MH-Z19B
  platformio_options:
    board_build.flash_mode: dio
  on_boot:
    script.execute: boot_led
  name_add_mac_suffix: false

globals:
  - id: co2_low_threshold
    type: float
    restore_value: true
    initial_value: '800'
  - id: co2_medium_threshold
    type: float
    restore_value: true
    initial_value: '1500'

script:
  - id: boot_led
    then:
      - light.turn_on:
          id: rg_b
          effect: "Green-Red"
      - delay: 90s
      - light.turn_off: rg_b
  - id: update_co2_status
    then:
      # Text Sensor
      - text_sensor.template.publish:
          id: co2_status
          state: !lambda |-
            float co2_value = id(co2_sensor).state;
            if (isnan(co2_value)) {
              return "No Data";
            }
            if (co2_value <= id(co2_low_threshold)) {
              return "Good";
            } else if (co2_value <= id(co2_medium_threshold)) {
              return "Warning";
            } else {
              return "High";
            }
      # Binary Sensors
      - binary_sensor.template.publish:
          id: co2_low
          state: !lambda |-
            return id(co2_sensor).state <= id(co2_low_threshold);
      - binary_sensor.template.publish:
          id: co2_medium
          state: !lambda |-
            return id(co2_sensor).state > id(co2_low_threshold) && id(co2_sensor).state <= id(co2_medium_threshold);
      - binary_sensor.template.publish:
          id: co2_high
          state: !lambda |-
            return id(co2_sensor).state > id(co2_medium_threshold);
      # LED Control Logic
      - if:
          condition:
            lambda: 'return id(co2_sensor).state <= id(co2_low_threshold);'
          then:
            # Green for low CO2
            - light.turn_off: rg_b
            - delay: 200ms
            - light.turn_on:
                id: rg_b
                brightness: 100%
                red: 0
                green: 1
                blue: 0
      - if:
          condition:
            lambda: 'return id(co2_sensor).state > id(co2_low_threshold) && id(co2_sensor).state <= id(co2_medium_threshold);'
          then:
            # Yellow for medium CO2
            - light.turn_off: rg_b
            - delay: 200ms
            - light.turn_on:
                id: rg_b
                brightness: 100%
                red: 1
                green: 1
                blue: 0
      - if:
          condition:
            lambda: 'return id(co2_sensor).state > id(co2_medium_threshold);'
          then:
            # Red for high CO2
            - light.turn_off: rg_b
            - delay: 200ms
            - light.turn_on:
                id: rg_b
                brightness: 100%
                red: 1
                green: 0
                blue: 0

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: LIGHT
  output_power: 15dB
  reboot_timeout: 10min
  fast_connect: true
  ap:
    ssid: $friendly_name

captive_portal:

web_server:
  port: 80
  version: 3

esp32:
  board: lolin_c3_mini
  framework:
    type: esp-idf

# Enable Home Assistant API
api:

ota:
  - platform: esphome
    password: $ota_pass

# Enable logging
logger:
  level: INFO

sensor:
  - platform: template
    id: esp_free_memory
    icon: mdi:memory
    name: ESP Free Memory
    lambda: |-
      return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: 'kB'
    state_class: measurement
    entity_category: "diagnostic"
  - platform: template
    name: ESP Used Memory
    id: esp_used_memory
    icon: mdi:memory
    lambda: |-
      return (heap_caps_get_total_size(MALLOC_CAP_INTERNAL) - heap_caps_get_free_size(MALLOC_CAP_INTERNAL)) / 1024;
    unit_of_measurement: "kB"
    state_class: measurement
    entity_category: "diagnostic"
  - platform: template
    name: ESP Memory Size
    id: esp_memory_size
    icon: mdi:memory
    lambda: |-
      return heap_caps_get_total_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: "kB"
    state_class: measurement
    entity_category: "diagnostic"
  - platform: internal_temperature
    name: ESP Temperature
    unit_of_measurement: 'Â°C'
    device_class: TEMPERATURE
    update_interval: 10s
    entity_category: "diagnostic"
  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 10s
    entity_category: "diagnostic"
  - platform: wifi_signal 
    name: WiFi RSSI
    id: wifi_signal_db
    update_interval: 10s
    entity_category: "diagnostic"
# MH-Z19
  - platform: mhz19
    id: mhz19_id
    uart_id: uart_mhz19
    co2:
      name: "CO2 Concentration"
      id: co2_sensor
      on_value:
        then:
          - script.execute:
              id: update_co2_status
    temperature:
      name: "MH-Z19 Temperature"
    update_interval: 60s
    automatic_baseline_calibration: false

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"
  - platform: factory_reset
    name: "ESP Factory Reset"
  - platform: safe_mode
    name: "ESP Safe Mode"
  - platform: template
    name: "CO2 Zero Calibration"
    entity_category: "config"
    icon: mdi:alert
    disabled_by_default: true
    on_press:
      - mhz19.calibrate_zero: mhz19_id
      - logger.log:
          format: "Starting zero point calibration..."
          level: INFO

switch:
  - platform: template
    name: "MH-Z19 ABC"
    optimistic: true
    disabled_by_default: true
    entity_category: "config"
    icon: mdi:alert-circle
    on_turn_on:
      mhz19.abc_enable: mhz19_id
    on_turn_off:
      mhz19.abc_disable: mhz19_id

number:
  - platform: template
    name: "CO2 Low Threshold"
    id: co2_low_threshold_config
    min_value: 400
    max_value: 2500
    step: 100
    initial_value: 800
    restore_value: true
    optimistic: true
    unit_of_measurement: 'ppm'
    entity_category: config
    on_value:
      then:
        - globals.set:
            id: co2_low_threshold
            value: !lambda 'return x;'
        - script.execute:
            id: update_co2_status
  - platform: template
    name: "CO2 Medium Threshold"
    id: co2_medium_threshold_config
    min_value: 400
    max_value: 2500
    step: 100
    initial_value: 1500
    restore_value: true
    optimistic: true
    unit_of_measurement: 'ppm'
    entity_category: config
    on_value:
      then:
        - globals.set:
            id: co2_medium_threshold
            value: !lambda 'return x;'
        - script.execute:
            id: update_co2_status

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "ESP IP"
      entity_category: "diagnostic"
      icon: mdi:ip-network
    mac_address:
      name: "ESP MAC"
      entity_category: "diagnostic"
      icon: mdi:network
    ssid:
      name: "WiFi SSID"
      entity_category: "diagnostic"
      icon: mdi:router-wireless
  # Optional: Add Home Assistant sensor entities
  - platform: template
    name: "CO2 Status"
    id: co2_status

uart:
  id: uart_mhz19
  rx_pin: GPIO20
  tx_pin: GPIO21
  baud_rate: 9600

output:
  - platform: ledc
    pin: GPIO3
    id: green_g
    max_power: 0.3
  - platform: ledc
    pin: GPIO2
    id: red_g
    max_power: 1
  - platform: ledc
    pin: GPIO8
    id: blue_g
    inverted: true

binary_sensor:
  - platform: template
    name: "CO2 Low Level"
    id: co2_low
  - platform: template
    name: "CO2 Medium Level"
    id: co2_medium
  - platform: template
    name: "CO2 High Level"
    id: co2_high

light:
  - platform: status_led
    output: blue_g
    id: led_status_light
    name: "LED Status Light"
    restore_mode: ALWAYS_OFF
    internal: false
    disabled_by_default: true
  - platform: rgb
    name: "RG-B"
    id: rg_b
    red: red_g
    green: green_g
    blue: blue_g
    default_transition_length: 200ms
    disabled_by_default: true
    effects:
      - lambda:
          name: "Green-Red" # animate at boot
          lambda: |-
            float t = (millis() % 6000) / 6000.0;
            float red, green;
            
            if (t < 0.5) {
              // Transisi dari hijau ke merah
              green = 1.0 - (t * 2.0);
              red = t * 2.0;
            } else {
              // Transisi dari merah ke hijau
              red = 1.0 - ((t - 0.5) * 2.0);
              green = (t - 0.5) * 2.0;
            }
            
            id(red_g).set_level(red);
            id(green_g).set_level(green);
            id(blue_g).set_level(0);
